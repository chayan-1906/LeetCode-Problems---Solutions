/* https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/
Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

Example 1:
Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]

Example 2:
Input: nums = [1,1]
Output: [2]

Constraints:
n == nums.length
1 <= n <= 10^5
1 <= nums[i] <= n
*/

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        Map<Integer, Integer> integerMap = new HashMap<> (  );
		List<Integer> integerList = new ArrayList<> (  );
		for (int i = 0; i < nums.length; i++)
			integerMap.put ( i + 1, 0 );    // make all entries set to 0
		for (int num : nums)
			integerMap.put ( num, integerMap.get ( num ) + 1 );
		for (Map.Entry i : integerMap.entrySet ()) {
			int value = (int) i.getValue ();
			if (value==0) {
				int key = (int) i.getKey ( );
				integerList.add ( key );
			}
		}
		return integerList;
    }
}
