/* https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

Constraints:
0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
nums is a non-decreasing array.
-10^9 <= target <= 10^9
*/

class Solution {
    public static int[] searchRange(int[] nums, int target) {
        int[] array = new int[]{-1, -1};
        int first = getIndex ( nums, target, true );
        if (first==-1)
            return array;
        int last = getIndex ( nums, target, false );
        array[0] = first;
        array[1] = last;
        return array;
    }

    public static int getIndex(int[] nums, int target, boolean getFirst) {
        int start = 0;
        int end = nums.length - 1;
        int mid, ans = -1;
        while (start <= end) {
            mid = start + (end - start) / 2;
            if (nums[ mid ] == target) {
                ans = mid;
                if (getFirst)
                    end = mid - 1;
                else
                    start = mid + 1;
            } else if (nums[ mid ] < target)
                start = mid + 1;
            else
                end = mid - 1;
        }
        return ans;
    }
}
