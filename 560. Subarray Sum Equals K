/** https://leetcode.com/problems/subarray-sum-equals-k/
Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:
Input: nums = [1,1,1], k = 2
Output: 2

Example 2:
Input: nums = [1,2,3], k = 3
Output: 2
 
Constraints:
1 <= nums.length <= 2 * 10⁴
-1000 <= nums[i] <= 1000
-10⁷ <= k <= 10⁷
*/

import java.util.*;
import java.util.Map.Entry;

class Solution {
    public int subarraySum(int[] nums, int k) {
        HashMap<Integer, Integer> hashMap = new HashMap<> ( );
		int prefixSum = 0;
		int count = 0;
		for (int i = 0; i < nums.length; i++) {
			prefixSum += nums[ i ];
			if (prefixSum == k) count++;
            if (hashMap.containsKey ( prefixSum - k )) count += hashMap.get ( prefixSum - k );
            hashMap.put(prefixSum,hashMap.getOrDefault(prefixSum,0)+1);
		}
		return count;
    }
}
