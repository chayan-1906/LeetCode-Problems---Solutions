/** https://leetcode.com/problems/sorting-the-sentence/
A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.
A sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.
For example, the sentence "This is a sentence" can be shuffled as "sentence4 a3 is2 This1" or "is2 sentence4 This1 a3".
Given a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.

Example 1:
Input: s = "is2 sentence4 This1 a3"
Output: "This is a sentence"
Explanation: Sort the words in s to their original positions "This1 is2 a3 sentence4", then remove the numbers.

Example 2:
Input: s = "Myself2 Me1 I4 and3"
Output: "Me Myself and I"
Explanation: Sort the words in s to their original positions "Me1 Myself2 and3 I4", then remove the numbers.

Constraints:
2 <= s.length <= 200
s consists of lowercase and uppercase English letters, spaces, and digits from 1 to 9.
The number of words in s is between 1 and 9.
The words in s are separated by a single space.
s contains no leading or trailing spaces.
*/

class Solution {
    public String sortSentence(String string) {
        if (string.length ( ) == 0) return "";
		else if (string.split ( " " ).length == 1) {
			return string.substring ( 0, string.length ( ) - 1 );
		}
		ArrayList<String> words = new ArrayList<> ( );
		for (int i = 0; i < string.split ( " " ).length; i++)
			if (string.contains ( " " )) words.add ( string.split ( " " )[ i ] );
		String[] result = new String[ words.size ( ) ];
		for (int i = 0; i < words.size ( ); i++) {
			String word = words.get ( i );
			result[ Integer.parseInt ( word.substring ( word.length ( ) - 1 ) ) - 1 ] = word;
		}
		StringBuilder stringBuilder = new StringBuilder ( );
		for (int i = 0; i < result.length - 1; i++) {
			stringBuilder.append ( result[ i ].substring ( 0, result[ i ].length ( ) - 1 ) ).append ( " " );
		}
		stringBuilder.append ( result[ result.length - 1 ].substring ( 0, result[ result.length - 1 ].length ( ) - 1 ) );
		return stringBuilder.toString ( );
    }
}
