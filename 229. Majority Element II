/* https://leetcode.com/problems/majority-element-ii/
Given an integer array of size n, find all elements that appear more than ⌊n/3⌋ times.
Follow-up: Could you solve the problem in linear time and in O(1) space?

Example 1:
Input: nums = [3,2,3]
Output: [3]

Example 2:
Input: nums = [1]
Output: [1]

Example 3:
Input: nums = [1,2]
Output: [1,2]

Constraints:
1 <= nums.length <= 5 * 10^4
-10^9 <= nums[i] <= 10^9
*/

class Solution {
    public static List<Integer> majorityElement(int[] nums) {
    Map<Integer, Integer> integerMap = new HashMap<> (  );
		List<Integer> integerListDistinct = new ArrayList<> (  );
    for (int num : nums) integerMap.put ( num, integerMap.getOrDefault ( num, 0 ) + 1 );
		for (Map.Entry i : integerMap.entrySet ()) {
			int value = (int) i.getValue ();
			int key = (int) i.getKey ();
			if (value > Math.floor ( nums.length/3 ))
				integerListDistinct.add ( key );
		}
		return integerListDistinct;
	}
}
