/** https://leetcode.com/problems/merge-k-sorted-lists/
You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
Merge all the linked-lists into one sorted linked-list and return it.

Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:
Input: lists = []
Output: []

Example 3:
Input: lists = [[]]
Output: []

Constraints:
k == lists.length
0 <= k <= 10⁴
0 <= lists[i].length <= 500
-10⁴ <= lists[i][j] <= 10⁴
lists[i] is sorted in ascending order.
The sum of lists[i].length will not exceed 10⁴.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
		return partitionK ( lists, 0, lists.length - 1 );
	}

	public static ListNode partitionK(ListNode[] lists, int start, int end) {
		if (start == end) return lists[ start ];
		if (start < end) {
			int middle = (start + end) / 2;
			ListNode l1 = partitionK ( lists, start, middle );
			ListNode l2 = partitionK ( lists, middle + 1, end );
			return mergeK ( l1, l2 );
		} else return null;
	}

	public static ListNode mergeK(ListNode linkedListNode1, ListNode linkedListNode2) {
		if (linkedListNode1 == null) return linkedListNode2;
		if (linkedListNode2 == null) return linkedListNode1;
		if (linkedListNode1.val < linkedListNode2.val) {
			linkedListNode1.next = mergeK ( linkedListNode1.next, linkedListNode2 );
			return linkedListNode1;
		} else {
			linkedListNode2.next = mergeK ( linkedListNode1, linkedListNode2.next );
			return linkedListNode2;
		}
	}
}
