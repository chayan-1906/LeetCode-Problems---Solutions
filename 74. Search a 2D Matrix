/* https://leetcode.com/problems/search-a-2d-matrix/
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-10^4 <= matrix[i][j], target <= 10^4
*/

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix.length==0 || matrix[0].length==0)
            return false;
        int low = 0;
        int high = matrix.length - 1;
        int targetRowIndex = -1;

        while (low <= high) { // iterate through rows
            int mid = low + (high-low)/2;
            if (matrix[mid][matrix[0].length-1]==target)
                return true;
            else if (target > matrix[mid][matrix[0].length-1])
                low = mid + 1;
            else {
                targetRowIndex = mid;
                high = mid - 1;
            }
        }

        if (targetRowIndex==-1)
            return false;

        low = 0;
        high = matrix[0].length - 1;

        while (low <= high) {   // iterate through columns
            int mid = low + (high-low)/2;
            if (matrix[targetRowIndex][mid]==target)
                return true;
            else if (target > matrix[targetRowIndex][mid])
                low = mid + 1;
            else
                high = mid - 1;
        }
        return false;
    }
}
