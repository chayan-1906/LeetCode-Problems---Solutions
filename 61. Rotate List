/* https://leetcode.com/problems/rotate-list/
Given the head of a linked list, rotate the list to the right by k places.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Example 2:
Input: head = [0,1,2], k = 4
Output: [2,0,1]

Constraints:
The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 10^9
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head==null)
			return null;
		int size = 0;
		ListNode temp = head;
		ListNode p1 = head;
		ListNode p2 = head;
		while (temp != null) {
			temp = temp.next;
			size++;
		}
		k = k % size;
		for (int i = 0; i < k; i++)
			p2 = p2.next;   // p2 points to the kth node
		while (p2.next != null) {
			p1 = p1.next;
			p2 = p2.next;
		}
		p2.next = head; // kth node will be the first node / head
		ListNode result = p1.next;
		p1.next = null; // Last Node
		return result;
    }
}
