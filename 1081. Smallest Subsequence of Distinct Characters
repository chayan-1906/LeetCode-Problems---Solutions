/* https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/
Return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.
Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/

Example 1:
Input: s = "bcabc"
Output: "abc"

Example 2:
Input: s = "cbacdcbc"
Output: "acdb"

Constraints:
1 <= s.length <= 1000
s consists of lowercase English letters.
*/

class Solution {
    public String smallestSubsequence(String s) {
        int[] count = new int[26];
		for (int i = 0; i < s.length (); i++)
			count[s.charAt ( i ) - 'a']++;
		int pos = 0;
		for (int i = 0; i < s.length (); i++) {
			if (s.charAt ( pos ) > s.charAt ( i ))
				pos = i;
			if (--count[s.charAt ( i ) - 'a']==0)
				break;
		}
		return s.length ()==0 ? "" : s.charAt ( pos ) + smallestSubsequence ( s.substring ( pos + 1 ).replaceAll ( "" + s.charAt ( pos ), "" ) );
    }
}
