/* https://leetcode.com/problems/maximum-sum-circular-subarray
Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.
A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].
A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

Example 1:
Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.

Example 2:
Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.

Example 3:
Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.
 

Constraints:
n == nums.length
1 <= n <= 3 * 10⁴
-3 * 10⁴ <= nums[i] <= 3 * 10⁴
*/

class Solution {
    public int maxSubarraySumCircular(int[] array) {
        /* linear sum, kadane's algo */
		int maxLinearSum = array[ 0 ];
		int maxLinearEnding = array[ 0 ];
		for (int i = 1; i < array.length; i++) {
			maxLinearEnding = Math.max ( maxLinearEnding + array[ i ], array[ i ] );
			maxLinearSum = Math.max ( maxLinearSum, maxLinearEnding );
		}

		/* check if array contains all negative elements */
		if (maxLinearSum < 0) return maxLinearSum;

		/* circular sum, modified kadane's algo */
		int minCircularSum = array[ 0 ];
		int minCircularEnding = array[ 0 ];
		int totalArraySum = array[ 0 ];
		for (int i = 1; i < array.length; i++) {
			totalArraySum += array[ i ];
			minCircularEnding = Math.min ( minCircularEnding + array[ i ], array[ i ] );
			minCircularSum = Math.min ( minCircularSum, minCircularEnding );
		}
		int maxCircularSum = totalArraySum - minCircularSum;
		return Math.max ( maxCircularSum, maxLinearSum );
    }
}
