/*  https://leetcode.com/problems/median-of-two-sorted-arrays/
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
Follow up: The overall run time complexity should be O(log (m+n))

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

Example 3:
Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000
*/

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int length1 = nums1.length;
        int length2 = nums2.length;
        int length = length1 + length2;
        float median;
        int[] nums = new int[length];
        for (int i=0; i<length1; i++)
            nums[i] = nums1[i];
        for (int i=0; i<length2; i++)
            nums[length1+i] = nums2[i];
        Arrays.sort ( nums );
        if (length%2!=0)    // if no of elements is odd, median is exactly the middle one...
            median = nums[ (int) Math.ceil (length/2) ];
        else   // if no of elements id even, median is the average of the two middle elements...
            median = (nums[ (length-1) / 2 ] + nums[ ((length-1) / 2) + 1 ]) / 2.0f;
        return median;
    }
}

class Solution {
    public static double findMedianSortedArrays(int[] array1, int[] array2) {
		if (array1.length == 0 && array2.length == 0) return 0;
		if (array1.length == 0) {
			if (array2.length % 2 == 0)
				return (double) (array2[ array2.length / 2 - 1 ] + array2[ array2.length / 2 ]) / 2;
			else return array2[ array2.length / 2 ];
		} else if (array2.length == 0) {
			if (array1.length % 2 == 0)
				return (double) (array1[ array1.length / 2 - 1 ] + array1[ array1.length / 2 ]) / 2;
			else return array1[ array1.length / 2 ];
		}
		int[] nums1 = array1, nums2 = array2;
		if (array1.length > array2.length) {
			int[] temp = nums1;
			nums1 = nums2;
			nums2 = temp;
		}
		int left1 = 0, right1 = nums1.length;
		int n1 = nums1.length, n2 = nums2.length;
		while (left1 <= right1) {
			int i1 = left1 + (right1 - left1) / 2;
			int i2 = (n1 + n2 + 1) / 2 - i1;

			int min1 = (i1 == n1) ? Integer.MAX_VALUE : nums1[ i1 ];
			int max1 = (i1 == 0) ? Integer.MIN_VALUE : nums1[ i1 - 1 ];
			int min2 = (i2 == n2) ? Integer.MAX_VALUE : nums2[ i2 ];
			int max2 = (i2 == 0) ? Integer.MIN_VALUE : nums2[ i2 - 1 ];

			if (max1 <= min2 && max2 <= min1) {
				if ((n1 + n2) % 2 == 0) {
					return ((double) Math.max ( max1, max2 ) + (double) Math.min ( min1, min2 )) / 2;
				} else return (double) Math.max ( max1, max2 );
			} else if (max1 > min2) right1 = i1 - 1;
			else left1 = i1 + 1;
		}
		return -1;
	}
}
