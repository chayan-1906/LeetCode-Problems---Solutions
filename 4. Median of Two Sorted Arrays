/*  https://leetcode.com/problems/median-of-two-sorted-arrays/
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
Follow up: The overall run time complexity should be O(log (m+n))

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

Example 3:
Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000
*/

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int length1 = nums1.length;
        int length2 = nums2.length;
        int length = length1 + length2;
        float median;
        int[] nums = new int[length];
        for (int i=0; i<length1; i++)
            nums[i] = nums1[i];
        for (int i=0; i<length2; i++)
            nums[length1+i] = nums2[i];
        Arrays.sort ( nums );
        if (length%2!=0)    // if no of elements is odd, median is exactly the middle one...
            median = nums[ (int) Math.ceil (length/2) ];
        else   // if no of elements id even, median is the average of the two middle elements...
            median = (nums[ (length-1) / 2 ] + nums[ ((length-1) / 2) + 1 ]) / 2.0f;
        return median;
    }
    
}
