/* https://leetcode.com/problems/maximum-subarray
Given an integer array nums, find the subarray with the largest sum, and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

Example 2:
Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 
Constraints:
1 <= nums.length <= 10⁵
-10⁴ <= nums[i] <= 10⁴
*/

class Solution {
    public int maxSubArray(int[] array) {
        /* Kadane's Algo */
		int maxEnding = array[ 0 ];
		int maxSum = array[ 0 ];
		for (int i = 1; i < array.length; i++) {
			maxEnding = Math.max ( maxEnding + array[ i ], array[ i ] );
			maxSum = Math.max ( maxSum, maxEnding );
		}
		return maxSum;
    }
}
