/* https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array
Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.

Example 1:
Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6

Example 2:
Input: arr = [1,1]
Output: 1

Constraints:
1 <= arr.length <= 104
0 <= arr[i] <= 105
*/

import java.util.Map.Entry;
import java.util.HashMap;

class Solution {
    public int findSpecialInteger(int[] arr) {
        HashMap<Integer, Integer> hashMap = new HashMap<> ( );
			for (int j : arr) {
				if (!hashMap.containsKey ( j )) hashMap.put ( j, 1 );
				else hashMap.put ( j, hashMap.get ( j ) + 1 );
			}
			System.out.println ( "Array Length: " + arr.length );
			System.out.println ( "Hashmap: " + hashMap );
			double requiredOccurrence = (arr.length * (25.00 / 100.00));
			for (Entry<Integer, Integer> entry : hashMap.entrySet ( )) {
				Integer key = entry.getKey ( );
				Integer value = entry.getValue ( );
				System.out.println ( "Key: " + key + " percentage: " + (float) value / (arr.length - value) );
				if (value > requiredOccurrence) return key;
			}
			return -1;
    }
}
