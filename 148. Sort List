/** https://leetcode.com/problems/sort-list/
Given the head of a linked list, return the list after sorting it in ascending order.

Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Example 3:
Input: head = []
Output: []

Constraints:
The number of nodes in the list is in the range [0, 5 * 10⁴].
-10⁵ <= Node.val <= 10⁵

Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static ListNode sortList(ListNode head) {
      if(head == null || head.next == null) return head;
		  ListNode middleNode = findMiddleNode ( head );
		  ListNode head2 = middleNode.next;
		  middleNode.next = null;
		  ListNode finalHead1 = sortList ( head );
		  ListNode finalHead2 = sortList ( head2 );
		  return merge ( finalHead1, finalHead2 );
	}

	public static ListNode findMiddleNode(ListNode head) {
		ListNode slowPtr = head;
		ListNode fastPtr = head.next;
		while (fastPtr != null && fastPtr.next != null) {
			slowPtr = slowPtr.next;
			fastPtr = fastPtr.next.next;
		}
		return slowPtr;
	}

	public static ListNode merge(ListNode head1, ListNode head2) {
		ListNode merged = new ListNode ( 0 );
		ListNode current = merged;
		while (head1 != null && head2 != null) {
			if (head1.val < head2.val) {
				current.next = head1;
				head1 = head1.next;
			} else {
				current.next = head2;
				head2 = head2.next;
			}
			current = current.next;
		}
		while (head1 != null) {
			current.next = head1;
			head1 = head1.next;
			current = current.next;
		}
		while (head2 != null) {
			current.next = head2;
			head2 = head2.next;
			current = current.next;
		}
		return merged.next;
	}
}
