/* https://leetcode.com/problems/set-matrix-zeroes/
Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's, and return the matrix.
You must do it in place.

Example 1:
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

Example 2:
Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]

Constraints:
m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-231 <= matrix[i][j] <= 231 - 1
*/

class Solution {
    public void setZeroes(int[][] matrix) {
        int noOfRows = matrix.length;
		if (noOfRows==0) return;
		int noOfColumn = matrix[0].length;
		if (noOfColumn==0) return;
		
		boolean hasZeroFirstRow = false;
		boolean hasZeroFirstColumn = false;
		
		for (int i = 0; i < noOfColumn; i++) {
			if (matrix[0][i]==0) {
				hasZeroFirstRow = true;
				break;
			}
		}
		for (int[] value : matrix) {
			if (value[ 0 ] == 0) {
				hasZeroFirstColumn = true;
				break;
			}
		}
		for (int i = 1; i < noOfRows; i++) {
			for (int j = 1; j < noOfColumn; j++) {
				if (matrix[i][j]==0) {
					matrix[i][0] = 0;
					matrix[0][j] = 0;
				}
			}
		}
		for (int i = 1; i < noOfRows; i++) {
			for (int j = 1; j < noOfColumn; j++) {
				if (matrix[i][0]==0 || matrix[0][j]==0) {
					matrix[i][j] = 0;
				}
			}
		}
		
		if (hasZeroFirstRow) {
			for (int i = 0; i < noOfColumn; i++) {
				matrix[0][i] = 0;
			}
		}
		
		if (hasZeroFirstColumn) {
			for (int i = 0; i < noOfRows; i++) {
				matrix[i][0] = 0;
			}
		}
		
		for (int[] ints : matrix) {
			for (int j = 0; j < noOfColumn; j++) {
				System.out.print ( ints[ j ] + " " );
			}
			System.out.println ( );
		}
    }
}
